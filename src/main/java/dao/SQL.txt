// === ConexaoMySQL.java ===
package dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class ConexaoMySQL {
    private static final String URL = "jdbc:mysql://localhost:3306/sistema_locadora";
    private static final String USUARIO = "root";
    private static final String SENHA = "sua_senha";

    public static Connection conectar() throws SQLException {
        return DriverManager.getConnection(URL, USUARIO, SENHA);
    }
}

// === UsuarioDAO.java ===
package dao;

import java.sql.*;
import model.*;

public class UsuarioDAO {
    public void adicionarUsuario(Usuario usuario) throws SQLException {
        String sql = "INSERT INTO usuarios (nome, senha, tipo) VALUES (?, ?, ?)";
        try (Connection conn = ConexaoMySQL.conectar();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, usuario.getNome());
            stmt.setString(2, usuario.getSenha());
            stmt.setString(3, usuario.getTipo());
            stmt.executeUpdate();
        }
    }

    public Usuario buscarUsuario(String nome, String senha) throws SQLException {
        String sql = "SELECT * FROM usuarios WHERE nome = ? AND senha = ?";
        try (Connection conn = ConexaoMySQL.conectar();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, nome);
            stmt.setString(2, senha);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                String tipo = rs.getString("tipo");
                switch (tipo) {
                    case "Administrador": return new Administrador(nome, senha, tipo);
                    case "Gerente": return new Gerente(nome, senha, tipo);
                    case "Atendente": return new Atendente(nome, senha, tipo);
                }
            }
        }
        return null;
    }
}

// === ClienteDAO.java ===
package dao;

import java.sql.*;
import java.util.*;
import model.*;

public class ClienteDAO {
    public void adicionarCliente(Cliente cliente) throws SQLException {
        String sql = "INSERT INTO clientes (cpf, nome, email) VALUES (?, ?, ?)";
        try (Connection conn = ConexaoMySQL.conectar();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, cliente.getCpf());
            stmt.setString(2, cliente.getNome());
            stmt.setString(3, cliente.getEmail());
            stmt.executeUpdate();
        }
    }

    public Cliente buscarClientePorCpf(String cpf) throws SQLException {
        String sql = "SELECT * FROM clientes WHERE cpf = ?";
        try (Connection conn = ConexaoMySQL.conectar();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, cpf);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                return new Cliente(cpf, rs.getString("nome"), rs.getString("email"));
            }
        }
        return null;
    }

    public List<Cliente> listarClientes() throws SQLException {
        List<Cliente> lista = new ArrayList<>();
        String sql = "SELECT * FROM clientes";
        try (Connection conn = ConexaoMySQL.conectar();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {
            while (rs.next()) {
                lista.add(new Cliente(rs.getString("cpf"), rs.getString("nome"), rs.getString("email")));
            }
        }
        return lista;
    }
}

// === VeiculoDAO.java ===
package dao;

import java.sql.*;
import java.util.*;
import model.*;

public class VeiculoDAO {
    public void adicionarVeiculo(Veiculo veiculo) throws SQLException {
        String sql = "INSERT INTO veiculos (placa, modelo, ano, disponivel) VALUES (?, ?, ?, ?)";
        try (Connection conn = ConexaoMySQL.conectar();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, veiculo.getPlaca());
            stmt.setString(2, veiculo.getModelo());
            stmt.setInt(3, veiculo.getAno());
            stmt.setBoolean(4, veiculo.isDisponivel());
            stmt.executeUpdate();
        }
    }

    public Veiculo buscarVeiculoPorPlaca(String placa) throws SQLException {
        String sql = "SELECT * FROM veiculos WHERE placa = ?";
        try (Connection conn = ConexaoMySQL.conectar();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, placa);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                return new Veiculo(placa, rs.getString("modelo"), rs.getInt("ano"), rs.getBoolean("disponivel"));
            }
        }
        return null;
    }

    public List<Veiculo> listarVeiculos() throws SQLException {
        List<Veiculo> lista = new ArrayList<>();
        String sql = "SELECT * FROM veiculos";
        try (Connection conn = ConexaoMySQL.conectar();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {
            while (rs.next()) {
                lista.add(new Veiculo(rs.getString("placa"), rs.getString("modelo"), rs.getInt("ano"), rs.getBoolean("disponivel")));
            }
        }
        return lista;
    }
}

// === PagamentoDAO.java ===
package dao;

import java.sql.*;
import java.util.*;
import model.*;

public class PagamentoDAO {
    public void adicionarPagamento(Pagamento pagamento) throws SQLException {
        String sql = "INSERT INTO pagamentos (id, valor_pago, data_pagamento) VALUES (?, ?, ?)";
        try (Connection conn = ConexaoMySQL.conectar();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, pagamento.getId());
            stmt.setDouble(2, pagamento.getValorPago());
            stmt.setDate(3, Date.valueOf(pagamento.getDataPagamento()));
            stmt.executeUpdate();
        }
    }

    public List<Pagamento> listarPagamentos() throws SQLException {
        List<Pagamento> lista = new ArrayList<>();
        String sql = "SELECT * FROM pagamentos";
        try (Connection conn = ConexaoMySQL.conectar();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {
            while (rs.next()) {
                lista.add(new Pagamento(rs.getString("id"), rs.getDouble("valor_pago"), rs.getDate("data_pagamento").toLocalDate()));
            }
        }
        return lista;
    }
}

// === LocacaoDAO.java ===
package dao;

import java.sql.*;
import java.util.*;
import model.*;

public class LocacaoDAO {
    public void adicionarLocacao(Locacao locacao) throws SQLException {
        String sql = "INSERT INTO locacoes (id, cliente_cpf, veiculo_placa, data_retirada, data_devolucao, valor_total, pagamento_id) VALUES (?, ?, ?, ?, ?, ?, ?)";
        try (Connection conn = ConexaoMySQL.conectar();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, locacao.getId());
            stmt.setString(2, locacao.getCliente().getCpf());
            stmt.setString(3, locacao.getVeiculo().getPlaca());
            stmt.setDate(4, Date.valueOf(locacao.getDataRetirada()));
            stmt.setDate(5, Date.valueOf(locacao.getDataDevolucao()));
            stmt.setDouble(6, locacao.getValorTotal());
            stmt.setString(7, locacao.getPagamento().getId());
            stmt.executeUpdate();
        }
    }

    public List<Locacao> listarLocacoes() throws SQLException {
        List<Locacao> lista = new ArrayList<>();
        String sql = "SELECT * FROM locacoes";
        try (Connection conn = ConexaoMySQL.conectar();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {
            while (rs.next()) {
                Cliente cliente = new ClienteDAO().buscarClientePorCpf(rs.getString("cliente_cpf"));
                Veiculo veiculo = new VeiculoDAO().buscarVeiculoPorPlaca(rs.getString("veiculo_placa"));
                Pagamento pagamento = new PagamentoDAO().listarPagamentos().stream()
                    .filter(p -> p.getId().equals(rs.getString("pagamento_id"))).findFirst().orElse(null);

                Locacao loc = new Locacao(
                    rs.getString("id"),
                    cliente,
                    veiculo,
                    rs.getDate("data_retirada").toLocalDate(),
                    rs.getDate("data_devolucao").toLocalDate(),
                    rs.getDouble("valor_total"),
                    pagamento
                );
                lista.add(loc);
            }
        }
        return lista;
    }
}
